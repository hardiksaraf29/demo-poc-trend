{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { useState } from \"react\";\nimport { Form } from \"react-bootstrap\";\n\nconst ReactstrapFormikInput = (_ref) => {\n  let {\n    form: {\n      touched,\n      errors,\n      setFieldTouched\n    }\n  } = _ref,\n      fields = Object.assign({}, _ref.field),\n      props = _objectWithoutProperties(_ref, [\"form\"]);\n\n  const {\n    0: isFocused,\n    1: setFocus\n  } = useState(false);\n\n  const {\n    id,\n    className,\n    is\n  } = props,\n        rest = _objectWithoutProperties(props, [\"id\", \"className\", \"is\"]);\n\n  const handleFocus = () => {\n    setFocus(true);\n  };\n\n  const handleBlur = () => {\n    setFocus(false);\n    setFieldTouched(fields.name, true);\n  };\n\n  let groupClassName = \"\";\n\n  if (isFocused || fields.value) {\n    groupClassName = \"value-exists\";\n  }\n\n  if (className) {\n    groupClassName = groupClassName + \" \" + className;\n  }\n\n  return /*#__PURE__*/_jsxs(Form.Group, {\n    controlId: id,\n    className: groupClassName,\n    children: [props.label && /*#__PURE__*/_jsx(Form.Label, {\n      className: \"float-label\",\n      htmlFor: fields.id,\n      children: props.label\n    }), /*#__PURE__*/_jsx(Form.Control, _objectSpread(_objectSpread(_objectSpread({\n      as: is\n    }, rest), fields), {}, {\n      isInvalid: Boolean(touched[fields.name] && errors[fields.name]),\n      onFocus: handleFocus,\n      onBlur: handleBlur,\n      className: Boolean(touched[fields.name] && errors[fields.name]) && \"error\"\n    })), touched[fields.name] && errors[fields.name] && errors[fields.name] !== \"required\" && /*#__PURE__*/_jsx(Form.Control.Feedback, {\n      className: \"pb-0 error invalid-feedback d-block\",\n      type: \"invalid\",\n      children: errors[fields.name]\n    })]\n  });\n};\n\nexport default ReactstrapFormikInput;","map":null,"metadata":{},"sourceType":"module"}