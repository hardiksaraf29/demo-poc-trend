{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\HardikSaraf\\\\Backup\\\\ssr-trendii-poc-backup\\\\src\\\\components\\\\reactstrap-formik\\\\ReactstrapFormikInput.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { useState } from \"react\";\nimport { Form } from \"react-bootstrap\";\n\nconst ReactstrapFormikInput = (_ref) => {\n  let {\n    form: {\n      touched,\n      errors,\n      setFieldTouched\n    }\n  } = _ref,\n      fields = Object.assign({}, _ref.field),\n      props = _objectWithoutProperties(_ref, [\"form\"]);\n\n  const {\n    0: isFocused,\n    1: setFocus\n  } = useState(false);\n\n  const {\n    id,\n    className,\n    is\n  } = props,\n        rest = _objectWithoutProperties(props, [\"id\", \"className\", \"is\"]);\n\n  const handleFocus = () => {\n    setFocus(true);\n  };\n\n  const handleBlur = () => {\n    setFocus(false);\n    setFieldTouched(fields.name, true);\n  };\n\n  let groupClassName = \"\";\n\n  if (isFocused || fields.value) {\n    groupClassName = \"value-exists\";\n  }\n\n  if (className) {\n    groupClassName = groupClassName + \" \" + className;\n  }\n\n  return /*#__PURE__*/_jsxDEV(Form.Group, {\n    controlId: id,\n    className: groupClassName,\n    children: [props.label && /*#__PURE__*/_jsxDEV(Form.Label, {\n      className: \"float-label\",\n      htmlFor: fields.id,\n      children: props.label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Form.Control, _objectSpread(_objectSpread(_objectSpread({\n      as: is\n    }, rest), fields), {}, {\n      isInvalid: Boolean(touched[fields.name] && errors[fields.name]),\n      onFocus: handleFocus,\n      onBlur: handleBlur,\n      className: Boolean(touched[fields.name] && errors[fields.name]) && \"error\"\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), touched[fields.name] && errors[fields.name] && errors[fields.name] !== \"required\" && /*#__PURE__*/_jsxDEV(Form.Control.Feedback, {\n      className: \"pb-0 error invalid-feedback d-block\",\n      type: \"invalid\",\n      children: errors[fields.name]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n};\n\nexport default ReactstrapFormikInput;","map":{"version":3,"sources":["D:/HardikSaraf/Backup/ssr-trendii-poc-backup/src/components/reactstrap-formik/ReactstrapFormikInput.tsx"],"names":["React","useState","Form","ReactstrapFormikInput","form","touched","errors","setFieldTouched","fields","field","props","isFocused","setFocus","id","className","is","rest","handleFocus","handleBlur","name","groupClassName","value","label","Boolean"],"mappings":";;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,IAAT,QAAqB,iBAArB;;AAEA,MAAMC,qBAAqB,GAAG,UAInB;AAAA,MAJoB;AAE7BC,IAAAA,IAAI,EAAE;AAAEC,MAAAA,OAAF;AAAWC,MAAAA,MAAX;AAAmBC,MAAAA;AAAnB;AAFuB,GAIpB;AAAA,MAHGC,MAGH,0BAHTC,KAGS;AAAA,MADNC,KACM;;AACT,QAAM;AAAA,OAACC,SAAD;AAAA,OAAYC;AAAZ,MAAwBX,QAAQ,CAAC,KAAD,CAAtC;;AACA,QAAM;AAAEY,IAAAA,EAAF;AAAMC,IAAAA,SAAN;AAAiBC,IAAAA;AAAjB,MAAiCL,KAAvC;AAAA,QAA8BM,IAA9B,4BAAuCN,KAAvC;;AACA,QAAMO,WAAW,GAAG,MAAM;AACxBL,IAAAA,QAAQ,CAAC,IAAD,CAAR;AACD,GAFD;;AAIA,QAAMM,UAAU,GAAG,MAAM;AACvBN,IAAAA,QAAQ,CAAC,KAAD,CAAR;AACAL,IAAAA,eAAe,CAACC,MAAM,CAACW,IAAR,EAAc,IAAd,CAAf;AACD,GAHD;;AAKA,MAAIC,cAAc,GAAG,EAArB;;AACA,MAAIT,SAAS,IAAIH,MAAM,CAACa,KAAxB,EAA+B;AAC7BD,IAAAA,cAAc,GAAG,cAAjB;AACD;;AACD,MAAIN,SAAJ,EAAe;AACbM,IAAAA,cAAc,GAAGA,cAAc,GAAG,GAAjB,GAAuBN,SAAxC;AACD;;AAED,sBACE,QAAC,IAAD,CAAM,KAAN;AAAY,IAAA,SAAS,EAAED,EAAvB;AAA2B,IAAA,SAAS,EAAEO,cAAtC;AAAA,eACGV,KAAK,CAACY,KAAN,iBACC,QAAC,IAAD,CAAM,KAAN;AAAY,MAAA,SAAS,EAAE,aAAvB;AAAsC,MAAA,OAAO,EAAEd,MAAM,CAACK,EAAtD;AAAA,gBACGH,KAAK,CAACY;AADT;AAAA;AAAA;AAAA;AAAA,YAFJ,eAME,QAAC,IAAD,CAAM,OAAN;AACE,MAAA,EAAE,EAAEP;AADN,OAEMC,IAFN,GAGMR,MAHN;AAIE,MAAA,SAAS,EAAEe,OAAO,CAAClB,OAAO,CAACG,MAAM,CAACW,IAAR,CAAP,IAAwBb,MAAM,CAACE,MAAM,CAACW,IAAR,CAA/B,CAJpB;AAKE,MAAA,OAAO,EAAEF,WALX;AAME,MAAA,MAAM,EAAEC,UANV;AAOE,MAAA,SAAS,EACPK,OAAO,CAAClB,OAAO,CAACG,MAAM,CAACW,IAAR,CAAP,IAAwBb,MAAM,CAACE,MAAM,CAACW,IAAR,CAA/B,CAAP,IAAwD;AAR5D;AAAA;AAAA;AAAA;AAAA,YANF,EAiBGd,OAAO,CAACG,MAAM,CAACW,IAAR,CAAP,IACCb,MAAM,CAACE,MAAM,CAACW,IAAR,CADP,IAECb,MAAM,CAACE,MAAM,CAACW,IAAR,CAAN,KAAwB,UAFzB,iBAGG,QAAC,IAAD,CAAM,OAAN,CAAc,QAAd;AACE,MAAA,SAAS,EAAC,qCADZ;AAEE,MAAA,IAAI,EAAC,SAFP;AAAA,gBAIGb,MAAM,CAACE,MAAM,CAACW,IAAR;AAJT;AAAA;AAAA;AAAA;AAAA,YApBN;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA+BD,CAvDD;;AAwDA,eAAehB,qBAAf","sourcesContent":["import React, { useState } from \"react\";\r\nimport { Form } from \"react-bootstrap\";\r\n\r\nconst ReactstrapFormikInput = ({\r\n  field: { ...fields },\r\n  form: { touched, errors, setFieldTouched },\r\n  ...props\r\n}: any) => {\r\n  const [isFocused, setFocus] = useState(false);\r\n  const { id, className, is, ...rest } = props;\r\n  const handleFocus = () => {\r\n    setFocus(true);\r\n  };\r\n\r\n  const handleBlur = () => {\r\n    setFocus(false);\r\n    setFieldTouched(fields.name, true);\r\n  };\r\n\r\n  let groupClassName = \"\";\r\n  if (isFocused || fields.value) {\r\n    groupClassName = \"value-exists\";\r\n  }\r\n  if (className) {\r\n    groupClassName = groupClassName + \" \" + className;\r\n  }\r\n\r\n  return (\r\n    <Form.Group controlId={id} className={groupClassName}>\r\n      {props.label && (\r\n        <Form.Label className={\"float-label\"} htmlFor={fields.id}>\r\n          {props.label}\r\n        </Form.Label>\r\n      )}\r\n      <Form.Control\r\n        as={is}\r\n        {...rest}\r\n        {...fields}\r\n        isInvalid={Boolean(touched[fields.name] && errors[fields.name])}\r\n        onFocus={handleFocus}\r\n        onBlur={handleBlur}\r\n        className={\r\n          Boolean(touched[fields.name] && errors[fields.name]) && \"error\"\r\n        }\r\n      />\r\n      {touched[fields.name] &&\r\n        errors[fields.name] &&\r\n        errors[fields.name] !== \"required\" && (\r\n          <Form.Control.Feedback\r\n            className=\"pb-0 error invalid-feedback d-block\"\r\n            type=\"invalid\"\r\n          >\r\n            {errors[fields.name]}\r\n          </Form.Control.Feedback>\r\n        )}\r\n        \r\n    </Form.Group>\r\n  );\r\n};\r\nexport default ReactstrapFormikInput;\r\n"]},"metadata":{},"sourceType":"module"}