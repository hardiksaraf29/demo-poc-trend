{"ast":null,"code":"import * as Yup from \"yup\";\nvar EmailRegularExpression = new RegExp(/^(?=.{1,64}@)(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@(?=.{1,255}$)((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\nvar phoneRegExp = /^((\\\\+[1-9]{1,4}[ \\\\-]*)|(\\\\([0-9]{2,3}\\\\)[ \\\\-]*)|([0-9]{2,4})[ \\\\-]*)*?[0-9]{3,4}?[ \\\\-]*[0-9]{3,4}?$/;\nexport var ContactUsValidationSchema = function ContactUsValidationSchema() {\n  return Yup.object().shape({\n    name: Yup.string().required(\"Required\"),\n    email: Yup.string().matches(EmailRegularExpression, \"Invalid Email\").required(\"Required\").max(100),\n    // phoneNumber: Yup.string().required(\"Required\"),\n    phoneNumber: Yup.string().required(\"Required\").matches(phoneRegExp, 'Phone number is not valid'),\n    companyName: Yup.string().required(\"Required\"),\n    message: Yup.string().required(\"Required\")\n  });\n};\n_c = ContactUsValidationSchema;\n\nvar _c;\n\n$RefreshReg$(_c, \"ContactUsValidationSchema\");","map":{"version":3,"sources":["D:/HardikSaraf/ssr-trendii-poc/src/validations/contact-us-form/contactUs.validations.ts"],"names":["Yup","EmailRegularExpression","RegExp","phoneRegExp","ContactUsValidationSchema","object","shape","name","string","required","email","matches","max","phoneNumber","companyName","message"],"mappings":"AAAA,OAAO,KAAKA,GAAZ,MAAqB,KAArB;AACA,IAAMC,sBAAsB,GAAG,IAAIC,MAAJ,CAAW,iLAAX,CAA/B;AACA,IAAMC,WAAW,GAAG,yGAApB;AAQA,OAAO,IAAMC,yBAAyB,GAAG,SAA5BA,yBAA4B,GAAM;AAC3C,SAAOJ,GAAG,CAACK,MAAJ,GAAaC,KAAb,CAAmB;AACtBC,IAAAA,IAAI,EAAEP,GAAG,CAACQ,MAAJ,GAAaC,QAAb,CAAsB,UAAtB,CADgB;AAEtBC,IAAAA,KAAK,EAAEV,GAAG,CAACQ,MAAJ,GACFG,OADE,CACMV,sBADN,EAC8B,eAD9B,EAEFQ,QAFE,CAEO,UAFP,EAGFG,GAHE,CAGE,GAHF,CAFe;AAMtB;AACAC,IAAAA,WAAW,EAAEb,GAAG,CAACQ,MAAJ,GACRC,QADQ,CACC,UADD,EAERE,OAFQ,CAEAR,WAFA,EAEa,2BAFb,CAPS;AAUtBW,IAAAA,WAAW,EAAEd,GAAG,CAACQ,MAAJ,GAAaC,QAAb,CAAsB,UAAtB,CAVS;AAWtBM,IAAAA,OAAO,EAAEf,GAAG,CAACQ,MAAJ,GAAaC,QAAb,CAAsB,UAAtB;AAXa,GAAnB,CAAP;AAaH,CAdM;KAAML,yB","sourcesContent":["import * as Yup from \"yup\";\r\nconst EmailRegularExpression = new RegExp(/^(?=.{1,64}@)(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@(?=.{1,255}$)((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\r\nconst phoneRegExp = /^((\\\\+[1-9]{1,4}[ \\\\-]*)|(\\\\([0-9]{2,3}\\\\)[ \\\\-]*)|([0-9]{2,4})[ \\\\-]*)*?[0-9]{3,4}?[ \\\\-]*[0-9]{3,4}?$/\r\nexport type IContactUsFormField = {\r\n    name: string;\r\n    email: string;\r\n    message: string;\r\n    phoneNumber: string;\r\n    companyName: string;\r\n}\r\nexport const ContactUsValidationSchema = () => {\r\n    return Yup.object().shape({\r\n        name: Yup.string().required(\"Required\"),\r\n        email: Yup.string()\r\n            .matches(EmailRegularExpression, \"Invalid Email\")\r\n            .required(\"Required\")\r\n            .max(100),\r\n        // phoneNumber: Yup.string().required(\"Required\"),\r\n        phoneNumber: Yup.string()\r\n            .required(\"Required\")\r\n            .matches(phoneRegExp, 'Phone number is not valid'),\r\n        companyName: Yup.string().required(\"Required\"),\r\n        message: Yup.string().required(\"Required\"),\r\n    });\r\n};"]},"metadata":{},"sourceType":"module"}