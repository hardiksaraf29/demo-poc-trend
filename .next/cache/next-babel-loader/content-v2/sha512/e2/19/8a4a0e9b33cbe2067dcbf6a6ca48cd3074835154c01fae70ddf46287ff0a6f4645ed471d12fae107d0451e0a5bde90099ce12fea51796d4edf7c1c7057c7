{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport _defineProperty from \"D:/HardikSaraf/Backup/ssr-trendii-poc-backup/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport _objectWithoutProperties from \"D:/HardikSaraf/Backup/ssr-trendii-poc-backup/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _extends from \"D:/HardikSaraf/Backup/ssr-trendii-poc-backup/node_modules/@babel/runtime/helpers/esm/extends\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState } from \"react\";\nimport { Form } from \"react-bootstrap\";\n\nvar ReactstrapFormikInput = function ReactstrapFormikInput(_ref) {\n  var fields = _extends({}, _ref.field),\n      _ref$form = _ref.form,\n      touched = _ref$form.touched,\n      errors = _ref$form.errors,\n      setFieldTouched = _ref$form.setFieldTouched,\n      props = _objectWithoutProperties(_ref, [\"field\", \"form\"]);\n\n  var _useState = useState(false),\n      isFocused = _useState[0],\n      setFocus = _useState[1];\n\n  var id = props.id,\n      className = props.className,\n      is = props.is,\n      rest = _objectWithoutProperties(props, [\"id\", \"className\", \"is\"]);\n\n  var handleFocus = function handleFocus() {\n    setFocus(true);\n  };\n\n  var handleBlur = function handleBlur() {\n    setFocus(false);\n    setFieldTouched(fields.name, true);\n  };\n\n  var groupClassName = \"\";\n\n  if (isFocused || fields.value) {\n    groupClassName = \"value-exists\";\n  }\n\n  if (className) {\n    groupClassName = groupClassName + \" \" + className;\n  }\n\n  return /*#__PURE__*/_jsxs(Form.Group, {\n    controlId: id,\n    className: groupClassName,\n    children: [props.label && /*#__PURE__*/_jsx(Form.Label, {\n      className: \"float-label\",\n      htmlFor: fields.id,\n      children: props.label\n    }), /*#__PURE__*/_jsx(Form.Control, _objectSpread(_objectSpread(_objectSpread({\n      as: is\n    }, rest), fields), {}, {\n      isInvalid: Boolean(touched[fields.name] && errors[fields.name]),\n      onFocus: handleFocus,\n      onBlur: handleBlur,\n      className: Boolean(touched[fields.name] && errors[fields.name]) && \"error\"\n    })), touched[fields.name] && errors[fields.name] && errors[fields.name] !== \"required\" && /*#__PURE__*/_jsx(Form.Control.Feedback, {\n      className: \"pb-0 error invalid-feedback d-block\",\n      type: \"invalid\",\n      children: errors[fields.name]\n    })]\n  });\n};\n\nexport default ReactstrapFormikInput;","map":null,"metadata":{},"sourceType":"module"}